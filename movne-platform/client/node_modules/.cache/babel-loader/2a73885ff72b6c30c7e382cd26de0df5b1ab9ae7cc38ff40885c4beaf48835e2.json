{"ast":null,"code":"export class RecordingService {\n  constructor() {\n    this.mediaRecorder = null;\n    this.audioChunks = [];\n    this.startTime = null;\n    this.duration = 0;\n    this.interval = null;\n  }\n  async startRecording() {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      this.mediaRecorder = new MediaRecorder(stream);\n      this.audioChunks = [];\n      this.startTime = new Date();\n      this.mediaRecorder.ondataavailable = event => {\n        this.audioChunks.push(event.data);\n      };\n      this.mediaRecorder.start();\n      this.startDurationTimer();\n      return true;\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      return false;\n    }\n  }\n  stopRecording() {\n    return new Promise(resolve => {\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.audioChunks, {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        this.clearDurationTimer();\n        const recordingData = {\n          blob: audioBlob,\n          url: audioUrl,\n          duration: this.duration,\n          timestamp: new Date().toISOString(),\n          size: audioBlob.size\n        };\n\n        // Save to IndexedDB\n        this.saveRecording(recordingData);\n        resolve(recordingData);\n      };\n      this.mediaRecorder.stop();\n      this.mediaRecorder.stream.getTracks().forEach(track => track.stop());\n    });\n  }\n  startDurationTimer() {\n    this.interval = setInterval(() => {\n      this.duration = Math.floor((new Date() - this.startTime) / 1000);\n      // Dispatch duration update event\n      window.dispatchEvent(new CustomEvent('recordingDurationUpdate', {\n        detail: {\n          duration: this.duration\n        }\n      }));\n    }, 1000);\n  }\n  clearDurationTimer() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n  async saveRecording(recordingData) {\n    const db = await this.openDB();\n    const tx = db.transaction('recordings', 'readwrite');\n    const store = tx.objectStore('recordings');\n    await store.add({\n      ...recordingData,\n      id: new Date().getTime()\n    });\n  }\n  async getRecordings() {\n    const db = await this.openDB();\n    const tx = db.transaction('recordings', 'readonly');\n    const store = tx.objectStore('recordings');\n    return store.getAll();\n  }\n  async openDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('movneDB', 1);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains('recordings')) {\n          db.createObjectStore('recordings', {\n            keyPath: 'id'\n          });\n        }\n      };\n    });\n  }\n  formatDuration(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n}","map":{"version":3,"names":["RecordingService","constructor","mediaRecorder","audioChunks","startTime","duration","interval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","Date","ondataavailable","event","push","data","start","startDurationTimer","error","console","stopRecording","Promise","resolve","onstop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","clearDurationTimer","recordingData","blob","url","timestamp","toISOString","size","saveRecording","stop","getTracks","forEach","track","setInterval","Math","floor","window","dispatchEvent","CustomEvent","detail","clearInterval","db","openDB","tx","transaction","store","objectStore","add","id","getTime","getRecordings","getAll","reject","request","indexedDB","open","onerror","onsuccess","result","onupgradeneeded","target","objectStoreNames","contains","createObjectStore","keyPath","formatDuration","seconds","minutes","remainingSeconds","toString","padStart"],"sources":["/workspaces/movne-platform/movne-platform/client/src/services/recordingService.js"],"sourcesContent":["export class RecordingService {\n  constructor() {\n    this.mediaRecorder = null;\n    this.audioChunks = [];\n    this.startTime = null;\n    this.duration = 0;\n    this.interval = null;\n  }\n\n  async startRecording() {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      this.mediaRecorder = new MediaRecorder(stream);\n      this.audioChunks = [];\n      this.startTime = new Date();\n      \n      this.mediaRecorder.ondataavailable = (event) => {\n        this.audioChunks.push(event.data);\n      };\n\n      this.mediaRecorder.start();\n      this.startDurationTimer();\n\n      return true;\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      return false;\n    }\n  }\n\n  stopRecording() {\n    return new Promise((resolve) => {\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        this.clearDurationTimer();\n        \n        const recordingData = {\n          blob: audioBlob,\n          url: audioUrl,\n          duration: this.duration,\n          timestamp: new Date().toISOString(),\n          size: audioBlob.size\n        };\n\n        // Save to IndexedDB\n        this.saveRecording(recordingData);\n        resolve(recordingData);\n      };\n\n      this.mediaRecorder.stop();\n      this.mediaRecorder.stream.getTracks().forEach(track => track.stop());\n    });\n  }\n\n  startDurationTimer() {\n    this.interval = setInterval(() => {\n      this.duration = Math.floor((new Date() - this.startTime) / 1000);\n      // Dispatch duration update event\n      window.dispatchEvent(new CustomEvent('recordingDurationUpdate', {\n        detail: { duration: this.duration }\n      }));\n    }, 1000);\n  }\n\n  clearDurationTimer() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  async saveRecording(recordingData) {\n    const db = await this.openDB();\n    const tx = db.transaction('recordings', 'readwrite');\n    const store = tx.objectStore('recordings');\n    await store.add({\n      ...recordingData,\n      id: new Date().getTime()\n    });\n  }\n\n  async getRecordings() {\n    const db = await this.openDB();\n    const tx = db.transaction('recordings', 'readonly');\n    const store = tx.objectStore('recordings');\n    return store.getAll();\n  }\n\n  async openDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('movneDB', 1);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n      \n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains('recordings')) {\n          db.createObjectStore('recordings', { keyPath: 'id' });\n        }\n      };\n    });\n  }\n\n  formatDuration(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}