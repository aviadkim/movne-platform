{"ast":null,"code":"var _jsxFileName = \"/workspaces/movne-platform/movne-platform/client/src/RealTimeTranscription.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeTranscription = ({\n  language,\n  onTranscriptionComplete\n}) => {\n  _s();\n  const [listening, setListening] = useState(false);\n  // We'll store transcript lines in an array so each final result is preserved.\n  const [transcript, setTranscript] = useState([]);\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    // Initialize the Web Speech API\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Web Speech API is not supported in this browser.\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Keep recording until stopped\n    recognition.interimResults = true; // Get interim results for live feedback\n    recognition.lang = language; // Use the language passed in (e.g., \"en-US\" or \"he-IL\")\n    recognitionRef.current = recognition;\n    recognition.onresult = event => {\n      let newText = \"\";\n      // Process each result from the event\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        newText += result[0].transcript;\n        if (result.isFinal) {\n          // When the result is final, append it to our transcript array\n          setTranscript(prev => [...prev, {\n            text: newText,\n            language\n          }]);\n          newText = \"\";\n        }\n      }\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.onend = () => {\n      setListening(false);\n      if (onTranscriptionComplete) {\n        onTranscriptionComplete(transcript);\n      }\n    };\n    return () => {\n      recognition.stop();\n    };\n  }, [language, onTranscriptionComplete, transcript]);\n  const startRecording = () => {\n    setTranscript([]); // Clear any previous transcript\n    try {\n      recognitionRef.current.start();\n      setListening(true);\n    } catch (err) {\n      console.error(\"Error starting recognition:\", err);\n    }\n  };\n  const stopRecording = () => {\n    recognitionRef.current.stop();\n    setListening(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"20px\",\n      padding: \"10px\",\n      border: \"1px solid #ccc\",\n      borderRadius: \"4px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u05EA\\u05DE\\u05DC\\u05D5\\u05DC \\u05E9\\u05D9\\u05D7\\u05D4 \\u05D1\\u05E9\\u05D9\\u05D3\\u05D5\\u05E8 \\u05D7\\u05D9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), !listening ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      style: {\n        padding: \"10px 20px\",\n        backgroundColor: \"#5cb85c\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"4px\",\n        cursor: \"pointer\"\n      },\n      children: \"\\u05D4\\u05EA\\u05D7\\u05DC \\u05D4\\u05E7\\u05DC\\u05D8\\u05D4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      style: {\n        padding: \"10px 20px\",\n        backgroundColor: \"#d9534f\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"4px\",\n        cursor: \"pointer\"\n      },\n      children: \"\\u05E2\\u05E6\\u05D5\\u05E8 \\u05D4\\u05E7\\u05DC\\u05D8\\u05D4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minHeight: \"150px\",\n        border: \"1px solid #eee\",\n        padding: \"10px\",\n        backgroundColor: \"#f9f9f9\",\n        marginTop: \"10px\",\n        overflowY: \"auto\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSize: \"14px\"\n      },\n      children: transcript.map((line, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: \"5px 0\"\n        },\n        children: line.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeTranscription, \"TAkJnkbLEiBqOOqm5Hem5OmSHD4=\");\n_c = RealTimeTranscription;\nexport default RealTimeTranscription;\nvar _c;\n$RefreshReg$(_c, \"RealTimeTranscription\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","RealTimeTranscription","language","onTranscriptionComplete","_s","listening","setListening","transcript","setTranscript","recognitionRef","SpeechRecognition","window","webkitSpeechRecognition","alert","recognition","continuous","interimResults","lang","current","onresult","event","newText","i","resultIndex","results","length","result","isFinal","prev","text","onerror","console","error","onend","stop","startRecording","start","err","stopRecording","style","marginTop","padding","border","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","backgroundColor","color","cursor","minHeight","overflowY","fontFamily","fontSize","map","line","idx","margin","_c","$RefreshReg$"],"sources":["/workspaces/movne-platform/movne-platform/client/src/RealTimeTranscription.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst RealTimeTranscription = ({ language, onTranscriptionComplete }) => {\n  const [listening, setListening] = useState(false);\n  // We'll store transcript lines in an array so each final result is preserved.\n  const [transcript, setTranscript] = useState([]);\n  const recognitionRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize the Web Speech API\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Web Speech API is not supported in this browser.\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true;       // Keep recording until stopped\n    recognition.interimResults = true;     // Get interim results for live feedback\n    recognition.lang = language;           // Use the language passed in (e.g., \"en-US\" or \"he-IL\")\n    recognitionRef.current = recognition;\n\n    recognition.onresult = (event) => {\n      let newText = \"\";\n      // Process each result from the event\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        newText += result[0].transcript;\n        if (result.isFinal) {\n          // When the result is final, append it to our transcript array\n          setTranscript(prev => [...prev, { text: newText, language }]);\n          newText = \"\";\n        }\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n\n    recognition.onend = () => {\n      setListening(false);\n      if (onTranscriptionComplete) {\n        onTranscriptionComplete(transcript);\n      }\n    };\n\n    return () => {\n      recognition.stop();\n    };\n  }, [language, onTranscriptionComplete, transcript]);\n\n  const startRecording = () => {\n    setTranscript([]); // Clear any previous transcript\n    try {\n      recognitionRef.current.start();\n      setListening(true);\n    } catch (err) {\n      console.error(\"Error starting recognition:\", err);\n    }\n  };\n\n  const stopRecording = () => {\n    recognitionRef.current.stop();\n    setListening(false);\n  };\n\n  return (\n    <div style={{ marginTop: \"20px\", padding: \"10px\", border: \"1px solid #ccc\", borderRadius: \"4px\" }}>\n      <h3>תמלול שיחה בשידור חי</h3>\n      {!listening ? (\n        <button\n          onClick={startRecording}\n          style={{ padding: \"10px 20px\", backgroundColor: \"#5cb85c\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", cursor: \"pointer\" }}\n        >\n          התחל הקלטה\n        </button>\n      ) : (\n        <button\n          onClick={stopRecording}\n          style={{ padding: \"10px 20px\", backgroundColor: \"#d9534f\", color: \"#fff\", border: \"none\", borderRadius: \"4px\", cursor: \"pointer\" }}\n        >\n          עצור הקלטה\n        </button>\n      )}\n      <div\n        style={{\n          minHeight: \"150px\",\n          border: \"1px solid #eee\",\n          padding: \"10px\",\n          backgroundColor: \"#f9f9f9\",\n          marginTop: \"10px\",\n          overflowY: \"auto\",\n          fontFamily: \"Arial, sans-serif\",\n          fontSize: \"14px\"\n        }}\n      >\n        {transcript.map((line, idx) => (\n          <p key={idx} style={{ margin: \"5px 0\" }}>{line.text}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeTranscription;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}