{"ast":null,"code":"export class WebSocketService {\n  constructor(url = 'ws://127.0.0.1:38397/ws', options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectAttempts: 5,\n      reconnectInterval: 2000,\n      ...options\n    };\n    this.ws = null;\n    this.reconnectCount = 0;\n  }\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectCount = 0;\n      };\n      this.ws.onclose = () => {\n        if (this.reconnectCount < this.options.reconnectAttempts) {\n          setTimeout(() => {\n            this.reconnectCount++;\n            this.connect();\n          }, this.options.reconnectInterval);\n        }\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n    }\n  }\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    }\n  }\n  close() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}","map":{"version":3,"names":["WebSocketService","constructor","url","options","reconnectAttempts","reconnectInterval","ws","reconnectCount","connect","WebSocket","onopen","console","log","onclose","setTimeout","onerror","error","send","data","readyState","OPEN","JSON","stringify","close"],"sources":["/workspaces/movne-platform/movne-platform/client/src/services/websocketService.js"],"sourcesContent":["export class WebSocketService {\n  constructor(url = 'ws://127.0.0.1:38397/ws', options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectAttempts: 5,\n      reconnectInterval: 2000,\n      ...options\n    };\n    this.ws = null;\n    this.reconnectCount = 0;\n  }\n\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectCount = 0;\n      };\n\n      this.ws.onclose = () => {\n        if (this.reconnectCount < this.options.reconnectAttempts) {\n          setTimeout(() => {\n            this.reconnectCount++;\n            this.connect();\n          }, this.options.reconnectInterval);\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n    }\n  }\n\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    }\n  }\n\n  close() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,CAAC;EAC5BC,WAAWA,CAACC,GAAG,GAAG,yBAAyB,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzD,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAG;MACbC,iBAAiB,EAAE,CAAC;MACpBC,iBAAiB,EAAE,IAAI;MACvB,GAAGF;IACL,CAAC;IACD,IAAI,CAACG,EAAE,GAAG,IAAI;IACd,IAAI,CAACC,cAAc,GAAG,CAAC;EACzB;EAEAC,OAAOA,CAAA,EAAG;IACR,IAAI;MACF,IAAI,CAACF,EAAE,GAAG,IAAIG,SAAS,CAAC,IAAI,CAACP,GAAG,CAAC;MAEjC,IAAI,CAACI,EAAE,CAACI,MAAM,GAAG,MAAM;QACrBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClC,IAAI,CAACL,cAAc,GAAG,CAAC;MACzB,CAAC;MAED,IAAI,CAACD,EAAE,CAACO,OAAO,GAAG,MAAM;QACtB,IAAI,IAAI,CAACN,cAAc,GAAG,IAAI,CAACJ,OAAO,CAACC,iBAAiB,EAAE;UACxDU,UAAU,CAAC,MAAM;YACf,IAAI,CAACP,cAAc,EAAE;YACrB,IAAI,CAACC,OAAO,CAAC,CAAC;UAChB,CAAC,EAAE,IAAI,CAACL,OAAO,CAACE,iBAAiB,CAAC;QACpC;MACF,CAAC;MAED,IAAI,CAACC,EAAE,CAACS,OAAO,GAAIC,KAAK,IAAK;QAC3BL,OAAO,CAACK,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;EAEAC,IAAIA,CAACC,IAAI,EAAE;IACT,IAAI,IAAI,CAACZ,EAAE,IAAI,IAAI,CAACA,EAAE,CAACa,UAAU,KAAKV,SAAS,CAACW,IAAI,EAAE;MACpD,IAAI,CAACd,EAAE,CAACW,IAAI,CAACI,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IACpC;EACF;EAEAK,KAAKA,CAAA,EAAG;IACN,IAAI,IAAI,CAACjB,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAACiB,KAAK,CAAC,CAAC;IACjB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}